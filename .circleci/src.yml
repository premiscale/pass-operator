version: 2.1


orbs:
  general: premiscale/general@1.2.0
  slack: circleci/slack@4.12.6


executors:
  python-3-10:
    docker:
      - image: cimg/python:3.10.13
  machine:
    image: ubuntu-2022.04


commands:
  - minikube-install:
      description: Install Minikube
      steps:
        - run:
            name: Install Minikube
            command: |+
              curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
              sudo install minikube-linux-amd64 /usr/local/bin/minikube
  - minikube-start:
      description: Start Minikube K8s cluster
      steps:
        - run:
            name: Start minikube
            command: ./scripts/minikube.sh start
  - minikube-stop:
      description: Stop Minikube K8s cluster
      steps:
        - run:
            name: Stop minikube
            command: ./scripts/minikube.sh stop
  - minikube-delete:
      description: Delete Minikube K8s cluster
      steps:
        - run:
            name: Delete minikube
            command: ./scripts/minikube.sh delete
  - docker-ecr-login:
      description: Login to AWS ECR
      parameters:
        aws-secret-access-key:
          description: AWS secret access key
          default: $AWS_SECRET_ACCESS_KEY
          type: string
        aws-account-id: 
          description: AWS account ID
          default: $AWS_ACCOUNT_ID
          type: string
        region:
          description: AWS region
          default: us-east-1
          type: string
      steps:
        - run:
            name: Install AWS CLI
            command: |+
              sudo apt-get install awscli -y
        - run:
            name: Login to AWS ECR
            command: |+
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin << parameters.aws-account-id >>.dkr.ecr.<< parameters.region >>.amazonaws.com


jobs:
  - docker-ecr:
      executor: machine
      parameters:
        aws-secret-access-key:
          description: AWS secret access key
          default: $AWS_SECRET_ACCESS_KEY
          type: string
        aws-account-id: 
          description: AWS account ID
          default: $AWS_ACCOUNT_ID
          type: string
        region:
          description: AWS region
          default: us-east-1
          type: string
        image-name:
          description: Docker image name
          default: $CI_PROJECT_NAME
          type: string
        args:
          description: Docker build arguments
          default: ''
          type: string
        tag:
          description: >-
            Docker image tag. Default: 0.0.<< pipeline.number >>
          default: 0.0.<< pipeline.number >>
          type: string
      steps:
        - docker-ecr-login:
            aws-secret-access-key: << parameters.aws-secret-access-key >>
            aws-account-id: << parameters.aws-account-id >>
            region: << parameters.region >>
        - run:
            name: Build and push Docker image
            command: |+
              docker build << parameters.args >> -t << parameters.image-name >>:<< parameters.tag >> .
              docker push << parameters.image-name >>:0.0.<< pipeline.number >>
  - helm-upgrade-local:
      


workflows:
  src:
    jobs:
      - general/python-pylint:
          name: pylint
          configuration_file: pyproject.toml
          context: nexus

      - general/python-mypy:
          name: mypy
          executor: python-3-10
          configuration_file: pyproject.toml

      # develop

      - general/python-release-poetry:
          name: twine upload [python-develop]
          context: nexus
          repository: python-develop
          version: 0.0.<< pipeline.number >>
          pypirc-config: .pypirc
          requires:
            - pylint
            - mypy
          filters:
            branches:
              ignore:
                - master

      - general/docker-nexus:
          name: docker nexus [pass-operator] [develop]
          image-name: pass-operator
          context: nexus
          nexus-domain: $DOCKER_DEVELOP_DOMAIN
          args: >-
            --build-arg=PYTHON_PACKAGE_VERSION=0.0.<< pipeline.number >>
            --build-arg=PYTHON_USERNAME=$NEXUS_USERNAME
            --build-arg=PYTHON_PASSWORD=$NEXUS_PASSWORD
            --build-arg=PYTHON_REPOSITORY=python-develop
            --build-arg=REPO_DOMAIN=$REPO_DOMAIN
          tag: 0.0.<< pipeline.number >>
          requires:
            - twine upload [python-develop]
          filters:
            branches:
              ignore:
                - master

      - general/helm-release-nexus:
          name: helm build and push [helm/operator] [develop]
          context: nexus
          repo: $HELM_DEVELOP_REPOSITORY_URL
          path: helm/operator
          version: 0.0.<< pipeline.number >>
          image-tag: 0.0.<< pipeline.number >>
          image-tag-path: .deployment.image.tag
          requires:
            - docker nexus [pass-operator] [develop]
          filters:
            branches:
              ignore:
                - master

      - slack/on-hold:
          name: 'slack: notify release development deployment hold'
          context: slack
          requires:
            - helm build and push [helm/operator] [develop]
          filters:
            branches:
              ignore:
                - master

      - request-approval:
          name: 'hold: release develop deployment'
          requires:
            - 'slack: notify release development deployment hold'
          type: approval
          filters:
            branches:
              ignore:
                - master

      - general/helm-upgrade:
          name: helm upgrade install [helm/operator] [develop]
          cluster: $CHELSEA_CLUSTER
          namespace: pass-operator-develop
          repo: $HELM_DEVELOP_REPOSITORY_URL
          version: 0.0.<< pipeline.number >>
          additional-values: >-
            --set global.image.registry="$DOCKER_DEVELOP_DOMAIN"
            --set deployment.pullSecrets[0]=nexus-docker-registry
            --set operator.interval="$OPERATOR_INTERVAL"
            --set operator.initial_delay="$OPERATOR_INITIAL_DELAY"
            --set operator.priority="$OPERATOR_PRIORITY"
            --set operator.ssh.createSecret="true"
            --set operator.pass.binary="$PASS_BINARY"
            --set operator.pass.storeSubPath="$PASS_DIRECTORY"
            --set operator.gpg.createSecret="true"
            --set operator.gpg.value="$PASS_GPG_KEY"
            --set operator.gpg.key_id="$PASS_GPG_KEY_ID"
            --set operator.gpg.passphrase="$PASS_GPG_PASSPHRASE"
            --set operator.git.url="$PASS_GIT_URL"
            --set operator.git.branch="$PASS_GIT_BRANCH"
            --set operator.ssh.value="$PASS_SSH_PRIVATE_KEY"
          requires:
            - 'hold: release develop deployment'
          context:
            - kubeconfig
            - nexus
            - password-store-operator
          filters:
            branches:
              ignore:
                - master

      # master

      - general/python-release-poetry:
          name: twine upload [python-master]
          context: nexus
          repository: python-master
          version: 0.0.<< pipeline.number >>
          pypirc-config: .pypirc
          requires:
            - pylint
          filters:
            branches:
              only:
                - master

      - general/docker-nexus:
          name: docker nexus [pass-operator] [master]
          image-name: pass-operator
          context: nexus
          nexus-domain: $DOCKER_MASTER_DOMAIN
          args: >-
            --build-arg=PYTHON_PACKAGE_VERSION=0.0.<< pipeline.number >>
            --build-arg=PYTHON_USERNAME=$NEXUS_USERNAME
            --build-arg=PYTHON_PASSWORD=$NEXUS_PASSWORD
            --build-arg=PYTHON_REPOSITORY=python-master
            --build-arg=REPO_DOMAIN=$REPO_DOMAIN
          tag: 0.0.<< pipeline.number >>
          requires:
            - twine upload [python-master]
          filters:
            branches:
              only:
                - master

      - general/helm-release-nexus:
          name: helm build and push [helm/operator] [master]
          context: nexus
          repo: $HELM_MASTER_REPOSITORY_URL
          path: helm/operator
          version: 0.0.<< pipeline.number >>
          image-tag: 0.0.<< pipeline.number >>
          image-tag-path: .deployment.image.tag
          requires:
            - docker nexus [pass-operator] [master]
          filters:
            branches:
              only:
                - master

      - slack/on-hold:
          name: 'slack: notify release master deployment hold'
          context: slack
          requires:
            - helm build and push [helm/operator] [master]
          filters:
            branches:
              only:
                - master

      - request-approval:
          name: 'hold: release master deployment'
          requires:
            - 'slack: notify release master deployment hold'
          type: approval
          filters:
            branches:
              only:
                - master

      - general/helm-upgrade:
          name: helm upgrade install [helm/operator] [master]
          cluster: $CHELSEA_CLUSTER
          namespace: pass-operator-master
          repo: $HELM_MASTER_REPOSITORY_URL
          version: 0.0.<< pipeline.number >>
          additional-values: >-
            --set global.image.registry="$DOCKER_MASTER_DOMAIN"
            --set deployment.pullSecrets[0]=nexus-docker-registry
            --set operator.interval="$OPERATOR_INTERVAL"
            --set operator.initial_delay="$OPERATOR_INITIAL_DELAY"
            --set operator.priority="$OPERATOR_PRIORITY"
            --set operator.ssh.createSecret="true"
            --set operator.pass.binary="$PASS_BINARY"
            --set operator.pass.storeSubPath="$PASS_DIRECTORY"
            --set operator.gpg.createSecret="true"
            --set operator.gpg.value="$PASS_GPG_KEY"
            --set operator.gpg.key_id="$PASS_GPG_KEY_ID"
            --set operator.gpg.passphrase="$PASS_GPG_PASSPHRASE"
            --set operator.git.url="$PASS_GIT_URL"
            --set operator.git.branch="$PASS_GIT_BRANCH"
            --set operator.ssh.value="$PASS_SSH_PRIVATE_KEY"
          requires:
            - 'hold: release master deployment'
          context:
            - kubeconfig
            - nexus
            - password-store-operator
          filters:
            branches:
              only:
                - master
